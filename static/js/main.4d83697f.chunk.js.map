{"version":3,"sources":["images/karlandjess.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","typography","fontFamily","join","htmlFontSize","fontSize","subtitle1","color","button","textTransform","useStyles","makeStyles","root","width","maxWidth","white","backgroundColor","margin","listItem","paddingTop","paddingBottom","list","marginTop","spacing","large","marginRight","border","height","App","classes","ThemeProvider","className","Container","Typography","align","variant","List","ListItem","ListItemText","primary","alignItems","ListItemAvatar","Avatar","alt","src","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,yC,yQCarCC,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,CACV,cACA,cACAC,KAAK,KACPC,aAAc,GACdC,SAAU,GACVC,UAAW,CACTC,MAAO,WAETC,OAAQ,CACNC,cAAe,OACfJ,SAAU,SAKVK,EAAYC,aAAW,SAACZ,GAAD,MAAY,CACvCa,KAAM,CACJC,MAAO,OACPC,SAAU,IACVP,MAAO,QAETQ,MAAO,CACLR,MAAO,OACPS,gBAAiB,OACjBH,MAAO,MACPI,OAAQ,aAEVC,SAAU,CACRC,WAAY,EACZC,cAAe,GAEjBC,KAAM,CACJC,UAAWvB,EAAMwB,QAAQ,IAE3BC,MAAO,CACLC,YAAa1B,EAAMwB,QAAQ,GAC3BG,OAAQ,kBACRb,MAAOd,EAAMwB,QAAQ,GACrBI,OAAQ5B,EAAMwB,QAAQ,QAoEXK,MAhEf,WACE,IAAMC,EAAUnB,IAChB,OACE,kBAACoB,EAAA,EAAD,CAAe/B,MAAOA,GACpB,yBAAKgC,UAAU,WACf,kBAACC,EAAA,EAAD,CAAWlB,SAAS,MAClB,yBAAKiB,UAAU,mCACb,yBAAKA,UAAU,kBACb,kBAACE,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAnC,WACA,kBAACF,EAAA,EAAD,CAAYC,MAAM,SAAUC,QAAQ,MAApC,8CAEA,kBAACC,EAAA,EAAD,CAAML,UAAWF,EAAQR,MACvB,kBAACgB,EAAA,EAAD,CAAUN,UAAWF,EAAQX,UAC3B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,aAExB,kBAACF,EAAA,EAAD,CAAWN,UAAWF,EAAQX,UAC5B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,iBAExB,kBAACF,EAAA,EAAD,CAAWN,UAAWF,EAAQX,UAC5B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,cAExB,kBAACF,EAAA,EAAD,CAAWN,UAAWF,EAAQX,UAC5B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,sCAI1B,kBAACH,EAAA,EAAD,CAAML,UAAWF,EAAQR,MACvB,kBAACgB,EAAA,EAAD,CAAUN,UAAWF,EAAQX,UAC3B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,mBAExB,kBAACF,EAAA,EAAD,CAAUN,UAAWF,EAAQX,UAC3B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,4BAI1B,kBAACH,EAAA,EAAD,CAAML,UAAWF,EAAQR,MACvB,kBAACgB,EAAA,EAAD,CAAUN,UAAWF,EAAQX,UAC3B,kBAACoB,EAAA,EAAD,CAAcC,QAAQ,oBAI1B,kBAACH,EAAA,EAAD,CAAML,UAAWF,EAAQjB,MACvB,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAQ,WAI1B,kBAACH,EAAA,EAAD,CAAML,UAAWF,EAAQjB,MACvB,kBAACyB,EAAA,EAAD,CAAUG,WAAW,UACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,IAAI,gBAAgBC,IAAKC,IAAOd,UAAWF,EAAQL,SAE3D,kBAACc,EAAA,EAAD,CAAcC,QAAQ,6BClGpBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d83697f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/karlandjess.419e99b4.jpg\";","import React from 'react';\nimport './App.css';\nimport { ThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport Avatar from '@material-ui/core/Avatar';\nimport image from './images/karlandjess.jpg'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'Blender Pro',\n      'sans-serif',\n    ].join(','),\n    htmlFontSize: 14,\n    fontSize: 12, //Mainly for inputs, to prevent zoom in on mobile devices\n    subtitle1: {\n      color: '#1f2532'\n    },\n    button: {\n      textTransform: 'none',\n      fontSize: '12'\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    color: '#fff',\n  },\n  white: {\n    color: '#fff',\n    backgroundColor: '#fff',\n    width: '50%',\n    margin: '40px auto'\n  },\n  listItem: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  list: {\n    marginTop: theme.spacing(3)\n  },\n  large: {\n    marginRight: theme.spacing(3),\n    border: '2px solid white',\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"landing\">\n      <Container maxWidth=\"lg\">\n        <div className=\"container-fluid cover-container\">\n          <div className=\"hero-container\">\n            <Typography align=\"center\" variant=\"h2\">PLAKIAS</Typography>\n            <Typography align=\"center\"  variant=\"h6\">Πλακιάς</Typography>\n\n            <List className={classes.list}>\n              <ListItem className={classes.listItem}>\n                <ListItemText primary=\"Octopus\" />\n              </ListItem>\n              <ListItem  className={classes.listItem}>\n                <ListItemText primary=\"Warm olives\"/>\n              </ListItem>\n              <ListItem  className={classes.listItem}>\n                <ListItemText primary=\"Saganaki\"/>\n              </ListItem>\n              <ListItem  className={classes.listItem}>\n                <ListItemText primary=\"Flat bread, tzatziki and hummus\"/>\n              </ListItem>\n            </List>\n            {/*<Divider className={classes.white} />*/}\n            <List className={classes.list}>\n              <ListItem className={classes.listItem}>\n                <ListItemText primary=\"Lamb Souvlaki\" />\n              </ListItem>\n              <ListItem className={classes.listItem}>\n                <ListItemText primary=\"Bourdeto - Baked fish\" />\n              </ListItem>\n            </List>\n            {/*<Divider className={classes.white} />*/}\n            <List className={classes.list}>\n              <ListItem className={classes.listItem}>\n                <ListItemText primary=\"Baklava Puffs\"/>\n              </ListItem>\n            </List>\n\n            <List className={classes.root}>\n              <ListItem>\n                <ListItemText primary=\"Ouzo\" />\n              </ListItem>\n            </List>\n\n            <List className={classes.root}>\n              <ListItem alignItems=\"center\">\n                <ListItemAvatar>\n                  <Avatar alt=\"Karl and Jess\" src={image} className={classes.large} />\n                </ListItemAvatar>\n                  <ListItemText primary=\"by Karl and Jess\" />\n              </ListItem>\n            </List>\n\n          </div>\n        </div>\n      </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}